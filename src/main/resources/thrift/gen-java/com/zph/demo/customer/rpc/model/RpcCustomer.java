/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zph.demo.customer.rpc.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-11")
public class RpcCustomer implements org.apache.thrift.TBase<RpcCustomer, RpcCustomer._Fields>, java.io.Serializable, Cloneable, Comparable<RpcCustomer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RpcCustomer");

  private static final org.apache.thrift.protocol.TField CUSTOMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("customerId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TODAY_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("todayPoint", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CONSUME_FIELD_DESC = new org.apache.thrift.protocol.TField("consume", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RpcCustomerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RpcCustomerTupleSchemeFactory());
  }

  public long customerId; // required
  public int point; // required
  public int todayPoint; // required
  public int consume; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CUSTOMER_ID((short)1, "customerId"),
    POINT((short)2, "point"),
    TODAY_POINT((short)3, "todayPoint"),
    CONSUME((short)4, "consume");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUSTOMER_ID
          return CUSTOMER_ID;
        case 2: // POINT
          return POINT;
        case 3: // TODAY_POINT
          return TODAY_POINT;
        case 4: // CONSUME
          return CONSUME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CUSTOMERID_ISSET_ID = 0;
  private static final int __POINT_ISSET_ID = 1;
  private static final int __TODAYPOINT_ISSET_ID = 2;
  private static final int __CONSUME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUSTOMER_ID, new org.apache.thrift.meta_data.FieldMetaData("customerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.TODAY_POINT, new org.apache.thrift.meta_data.FieldMetaData("todayPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.CONSUME, new org.apache.thrift.meta_data.FieldMetaData("consume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RpcCustomer.class, metaDataMap);
  }

  public RpcCustomer() {
  }

  public RpcCustomer(
    long customerId,
    int point,
    int todayPoint,
    int consume)
  {
    this();
    this.customerId = customerId;
    setCustomerIdIsSet(true);
    this.point = point;
    setPointIsSet(true);
    this.todayPoint = todayPoint;
    setTodayPointIsSet(true);
    this.consume = consume;
    setConsumeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RpcCustomer(RpcCustomer other) {
    __isset_bitfield = other.__isset_bitfield;
    this.customerId = other.customerId;
    this.point = other.point;
    this.todayPoint = other.todayPoint;
    this.consume = other.consume;
  }

  public RpcCustomer deepCopy() {
    return new RpcCustomer(this);
  }

  @Override
  public void clear() {
    setCustomerIdIsSet(false);
    this.customerId = 0;
    setPointIsSet(false);
    this.point = 0;
    setTodayPointIsSet(false);
    this.todayPoint = 0;
    setConsumeIsSet(false);
    this.consume = 0;
  }

  public long getCustomerId() {
    return this.customerId;
  }

  public RpcCustomer setCustomerId(long customerId) {
    this.customerId = customerId;
    setCustomerIdIsSet(true);
    return this;
  }

  public void unsetCustomerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTOMERID_ISSET_ID);
  }

  /** Returns true if field customerId is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerId() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTOMERID_ISSET_ID);
  }

  public void setCustomerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTOMERID_ISSET_ID, value);
  }

  public int getPoint() {
    return this.point;
  }

  public RpcCustomer setPoint(int point) {
    this.point = point;
    setPointIsSet(true);
    return this;
  }

  public void unsetPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  /** Returns true if field point is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  public void setPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINT_ISSET_ID, value);
  }

  public int getTodayPoint() {
    return this.todayPoint;
  }

  public RpcCustomer setTodayPoint(int todayPoint) {
    this.todayPoint = todayPoint;
    setTodayPointIsSet(true);
    return this;
  }

  public void unsetTodayPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TODAYPOINT_ISSET_ID);
  }

  /** Returns true if field todayPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetTodayPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __TODAYPOINT_ISSET_ID);
  }

  public void setTodayPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TODAYPOINT_ISSET_ID, value);
  }

  public int getConsume() {
    return this.consume;
  }

  public RpcCustomer setConsume(int consume) {
    this.consume = consume;
    setConsumeIsSet(true);
    return this;
  }

  public void unsetConsume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSUME_ISSET_ID);
  }

  /** Returns true if field consume is set (has been assigned a value) and false otherwise */
  public boolean isSetConsume() {
    return EncodingUtils.testBit(__isset_bitfield, __CONSUME_ISSET_ID);
  }

  public void setConsumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSUME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CUSTOMER_ID:
      if (value == null) {
        unsetCustomerId();
      } else {
        setCustomerId((Long)value);
      }
      break;

    case POINT:
      if (value == null) {
        unsetPoint();
      } else {
        setPoint((Integer)value);
      }
      break;

    case TODAY_POINT:
      if (value == null) {
        unsetTodayPoint();
      } else {
        setTodayPoint((Integer)value);
      }
      break;

    case CONSUME:
      if (value == null) {
        unsetConsume();
      } else {
        setConsume((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CUSTOMER_ID:
      return getCustomerId();

    case POINT:
      return getPoint();

    case TODAY_POINT:
      return getTodayPoint();

    case CONSUME:
      return getConsume();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CUSTOMER_ID:
      return isSetCustomerId();
    case POINT:
      return isSetPoint();
    case TODAY_POINT:
      return isSetTodayPoint();
    case CONSUME:
      return isSetConsume();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RpcCustomer)
      return this.equals((RpcCustomer)that);
    return false;
  }

  public boolean equals(RpcCustomer that) {
    if (that == null)
      return false;

    boolean this_present_customerId = true;
    boolean that_present_customerId = true;
    if (this_present_customerId || that_present_customerId) {
      if (!(this_present_customerId && that_present_customerId))
        return false;
      if (this.customerId != that.customerId)
        return false;
    }

    boolean this_present_point = true;
    boolean that_present_point = true;
    if (this_present_point || that_present_point) {
      if (!(this_present_point && that_present_point))
        return false;
      if (this.point != that.point)
        return false;
    }

    boolean this_present_todayPoint = true;
    boolean that_present_todayPoint = true;
    if (this_present_todayPoint || that_present_todayPoint) {
      if (!(this_present_todayPoint && that_present_todayPoint))
        return false;
      if (this.todayPoint != that.todayPoint)
        return false;
    }

    boolean this_present_consume = true;
    boolean that_present_consume = true;
    if (this_present_consume || that_present_consume) {
      if (!(this_present_consume && that_present_consume))
        return false;
      if (this.consume != that.consume)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_customerId = true;
    list.add(present_customerId);
    if (present_customerId)
      list.add(customerId);

    boolean present_point = true;
    list.add(present_point);
    if (present_point)
      list.add(point);

    boolean present_todayPoint = true;
    list.add(present_todayPoint);
    if (present_todayPoint)
      list.add(todayPoint);

    boolean present_consume = true;
    list.add(present_consume);
    if (present_consume)
      list.add(consume);

    return list.hashCode();
  }

  @Override
  public int compareTo(RpcCustomer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCustomerId()).compareTo(other.isSetCustomerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerId, other.customerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint()).compareTo(other.isSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, other.point);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodayPoint()).compareTo(other.isSetTodayPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodayPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todayPoint, other.todayPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsume()).compareTo(other.isSetConsume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consume, other.consume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RpcCustomer(");
    boolean first = true;

    sb.append("customerId:");
    sb.append(this.customerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point:");
    sb.append(this.point);
    first = false;
    if (!first) sb.append(", ");
    sb.append("todayPoint:");
    sb.append(this.todayPoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("consume:");
    sb.append(this.consume);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RpcCustomerStandardSchemeFactory implements SchemeFactory {
    public RpcCustomerStandardScheme getScheme() {
      return new RpcCustomerStandardScheme();
    }
  }

  private static class RpcCustomerStandardScheme extends StandardScheme<RpcCustomer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RpcCustomer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CUSTOMER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.customerId = iprot.readI64();
              struct.setCustomerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.point = iprot.readI32();
              struct.setPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TODAY_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todayPoint = iprot.readI32();
              struct.setTodayPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONSUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.consume = iprot.readI32();
              struct.setConsumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RpcCustomer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CUSTOMER_ID_FIELD_DESC);
      oprot.writeI64(struct.customerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT_FIELD_DESC);
      oprot.writeI32(struct.point);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TODAY_POINT_FIELD_DESC);
      oprot.writeI32(struct.todayPoint);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONSUME_FIELD_DESC);
      oprot.writeI32(struct.consume);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RpcCustomerTupleSchemeFactory implements SchemeFactory {
    public RpcCustomerTupleScheme getScheme() {
      return new RpcCustomerTupleScheme();
    }
  }

  private static class RpcCustomerTupleScheme extends TupleScheme<RpcCustomer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RpcCustomer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCustomerId()) {
        optionals.set(0);
      }
      if (struct.isSetPoint()) {
        optionals.set(1);
      }
      if (struct.isSetTodayPoint()) {
        optionals.set(2);
      }
      if (struct.isSetConsume()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCustomerId()) {
        oprot.writeI64(struct.customerId);
      }
      if (struct.isSetPoint()) {
        oprot.writeI32(struct.point);
      }
      if (struct.isSetTodayPoint()) {
        oprot.writeI32(struct.todayPoint);
      }
      if (struct.isSetConsume()) {
        oprot.writeI32(struct.consume);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RpcCustomer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.customerId = iprot.readI64();
        struct.setCustomerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.point = iprot.readI32();
        struct.setPointIsSet(true);
      }
      if (incoming.get(2)) {
        struct.todayPoint = iprot.readI32();
        struct.setTodayPointIsSet(true);
      }
      if (incoming.get(3)) {
        struct.consume = iprot.readI32();
        struct.setConsumeIsSet(true);
      }
    }
  }

}

